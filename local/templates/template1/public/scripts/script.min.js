"use strict";

const getScript = e => new Promise((t, o) => {
  const a = document.createElement("script");
  a.src = e, a.async = !0, a.onerror = o, a.onload = a.onreadystatechange = function () {
    const e = this.readyState;
    e && "loaded" !== e && "complete" !== e || (a.onload = a.onreadystatechange = null, t());
  }, document.head.appendChild(a);
});
document.addEventListener("DOMContentLoaded", () => {
  let e = "";
  fetch("/local/templates/template1/ajax/recaptcha.php").then(e => e.json()).then(t => {
    e = t.publicKey, window.captchaPublicKey = e, getScript("https://www.google.com/recaptcha/api.js?render=" + e).catch(() => {
      console.error("Could not load script");
    });
  });
});
"use strict";

window.setCookie = (e, o, t = "/") => {
  let i = e + "=" + escape(o);
  i += "; expires=" + new Date(Date.now() + 864e5).toGMTString(), i += "; path=" + escape(t), document.cookie = i;
}, window.getCookie = e => {
  const o = document.cookie.match("(^|;) ?" + e + "=([^;]*)(;|$)");
  return o ? unescape(o[2]) : null;
}, document.addEventListener("DOMContentLoaded", () => {
  const e = document.querySelector(".cookie-notification");
  if (!e) return;
  const o = e.querySelector("[data-agree]");
  getCookie("_agreement-cookie") || e.classList.remove("cookie-notification--hide"), o.addEventListener("click", () => {
    setCookie("_agreement-cookie", "y", "/"), e.classList.add("cookie-notification--hide");
  });
});
"use strict";

document.addEventListener("DOMContentLoaded", () => {
  const t = document.querySelectorAll("[data-vue]");
  if (!t) return;
  t.forEach(t => {
    Vue.directive("mask", VueMask.VueMaskDirective);
    const i = new Vue({
      el: t,
      data: {
        data: {},
        submitURL: "",
        submitted: !1,
        state: "",
        invalid: {
          name: !1,
          phone: !1,
          phoneIncorrect: !1,
          email: !1,
          emailIncorrect: !1
        },
        error: !1
      },
      mounted: function () {
        this.submitURL = this.$el.action;
      },
      methods: {
        submit: function () {
          if (this.checkForm()) {
            const t = Object.assign({}, this.data),
              i = new FormData();
            Object.keys(t).forEach(e => {
              !0 === t[e] && (t[e] = "Да"), i.append(e, t[e]);
            }), this.submitted = !0, this.error = !1, fetch(this.submitURL, {
              method: "POST",
              body: i
            }).then(t => {
              this.state = 200 === t.status ? "SUCCESS" : "", t.ok || (this.submitted = !1, this.error = !0);
            }).catch(t => {
              console.log(t);
            });
          }
        },
        checkForm: function () {
          let t = !0;
          return this.invalid.name = !1, this.invalid.phone = !1, this.invalid.phoneIncorrect = !1, this.invalid.email = !1, this.invalid.emailIncorrect = !1, this.invalid.message = !1, this.data.name || (this.invalid.name = !0, t = !1), this.data.phone || (this.invalid.phone = !0, t = !1), this.data.phone && !this.validPhone(this.data.phone) && (this.invalid.phoneIncorrect = !0, t = !1), this.data.email || (this.invalid.email = !0, t = !1), this.data.email && !this.validEmail(this.data.email) && (this.invalid.emailIncorrect = !0, t = !1), this.data.message || (this.invalid.message = !0, t = !1), t || i.$forceUpdate(), t;
        },
        validPhone: function (t) {
          return new RegExp("^((\\d|\\+\\d)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$").test(t);
        },
        validEmail: function (t) {
          return new RegExp("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]+$").test(t);
        },
        checkCaptcha: function () {
          const t = this;
          "grecaptcha" in window && grecaptcha.execute(window.captchaPublicKey, {
            action: "submit"
          }).then(function (i) {
            t.data.recaptchaResponse = i || "", t.submit();
          });
        }
      }
    });
  });
});
"use strict";

const mapContainer = document.getElementById("map");
async function initMap() {
  await ymaps3.ready;
  const {
      YMap: a,
      YMapDefaultSchemeLayer: e,
      YMapDefaultFeaturesLayer: n,
      YMapMarker: t
    } = ymaps3,
    l = new a(document.getElementById("map"), {
      location: {
        center: [39.024074, 45.070148],
        zoom: 16
      }
    }),
    i = document.createElement("div"),
    d = new t({
      coordinates: [39.024074, 45.070148],
      draggable: !0
    }, i);
  i.innerHTML = '\n  <div class="map__marker-wrapper">\n    <div class="map__marker">\n      <span class="visually-hidden">AngelaVladi</span>\n      <svg class="map__logo" viewBox="0 0 100 50" width="150" height="75" xmlns="http://www.w3.org/2000/svg">\n        <use xlink:href="/local/templates/template1/public/images/sprite.svg#angelavladi-logo" />\n      </svg>\n      <p>Краснодар, ул. Восточно-Кругликовская, 65</p>\n    </div>\n  </div>\n  ', l.addChild(new e()), l.addChild(new n({
    zIndex: 1800
  })), l.addChild(d);
}
null !== mapContainer && initMap();
"use strict";

const header = document.querySelector(".header"),
  menu = header.querySelector(".navigation__list"),
  button = header.querySelector(".navigation__button");
button && button.addEventListener("click", () => {
  menu.classList.toggle("navigation__list--hidden"), button.classList.toggle("button--menu-close");
});
"use strict";

const sliders = document.querySelectorAll(".swiper-container"),
  thumbs = document.querySelector(".slider-thumbs"),
  defaultSliderOptions = {
    speed: 2200,
    watchOverflow: !0,
    observer: !0,
    resizeObserver: !0,
    loop: !0
  },
  initSlider = e => {
    if (!e) return;
    const t = {
      ...defaultSliderOptions
    };
    e.hasAttribute("data-autoplay") && (t.autoplay = {
      delay: 4e3,
      disableOnInteraction: !1,
      pauseOnMouseEnter: !0
    }), e.hasAttribute("data-slides") && (t.breakpoints = {
      320: {
        slidesPerView: 1,
        spaceBetween: 20
      },
      550: {
        slidesPerView: 2,
        spaceBetween: 20
      },
      1024: {
        slidesPerView: 3,
        spaceBetween: 20
      },
      1280: {
        slidesPerView: 4,
        spaceBetween: 20
      },
      1440: {
        slidesPerView: 5,
        spaceBetween: 30
      }
    }), e.hasAttribute("data-navigation") && (t.navigation = {
      nextEl: ".button--right",
      prevEl: ".button--left"
    }), e.hasAttribute("data-pagination") && (t.pagination = {
      el: ".slider-pagination",
      type: "bullets",
      clickable: !0
    }), e.hasAttribute("data-gallery") && (t.on = {
      init: function () {
        const t = lightGallery(e, {
          plugins: [lgZoom, lgVideo, lgThumbnail],
          selector: "li",
          speed: 500,
          download: !1,
          actualSize: !1,
          showZoomInOutIcons: !0,
          infiniteZoom: !0,
          exThumbImage: "data-thumb",
          autoplayVideoOnSlide: !0,
          gotoNextSlideOnVideoEnd: !1,
          mobileSettings: {
            showCloseIcon: !0,
            controls: !0
          }
        });
        e.addEventListener("lgBeforeClose", () => {
          i.slideTo(t.index, 0);
        });
      }
    }), e.hasAttribute("data-with-thumbs") && (t.thumbs = {
      swiper: thumbs
    }), e.hasAttribute("data-thumb") && (t.centeredSlides = !0, t.breakpoints = {
      320: {
        slidesPerView: 4,
        spaceBetween: 5
      },
      1280: {
        slidesPerView: 5,
        spaceBetween: 10
      }
    });
    const i = new Swiper(e, t);
  };
sliders.length > 0 && sliders.forEach(e => {
  initSlider(e);
});
//# sourceMappingURL=script.min.js.map
